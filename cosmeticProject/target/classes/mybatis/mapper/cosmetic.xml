<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="comm.proj.my.cosmetic.dao.ICosDAO">

	<!-- 검색어로 입력한 화장품 리스트 -->
	<select id="searchInfo" resultType="CosVO" parameterType="String">
		SELECT 
		    c.cosmetic_no,
		    c.name,
		    c.cos_image,
		    c.cate_cd,
		    c.company_name,
		    c.company_logo,
		    ROUND(AVG(r.star_score), 2) as star_score,
    		COUNT(r.review_no) as review_Count
		FROM 
		    cosmetic c
		LEFT JOIN 
		    review r ON c.cosmetic_no = r.cosmetic_no
		WHERE 
		    (c.name LIKE '%' || #{keyword} || '%' OR c.company_name LIKE '%' || #{keyword} || '%')
		GROUP BY 
		    c.cosmetic_no,
		    c.name,
		    c.cos_image,
		    c.cate_cd,
		    c.company_name,
		    c.company_logo
	</select>
	
	<!-- 검색시 화장품들 별점 조회 -->
	<select id="score_list" resultType="CosVO" parameterType="String">
		SELECT 
		    c.cosmetic_no,
		    c.name,
		    c.cos_image,
		    c.cate_cd,
		    c.company_name,
		    c.company_logo,
		    ROUND(AVG(r.star_score), 2) as star_score
		FROM 
		    cosmetic c
		LEFT JOIN 
		    review r ON c.cosmetic_no = r.cosmetic_no
		WHERE 
		    (c.name LIKE '%' || #{keyword} || '%' OR c.company_name LIKE '%' || #{keyword} || '%')
		GROUP BY 
		    c.cosmetic_no,
		    c.name,
		    c.cos_image,
		    c.cate_cd,
		    c.company_name,
		    c.company_logo
	</select>
	
	<!-- 화장품 상세 조회 -->
	<select id="cosmetic_detail" resultType="CosVO" parameterType="int">
		SELECT *
		FROM cosmetic
		WHERE cosmetic_no = #{cosmeticNo}
	</select>	
	
	<!-- 화장품 리뷰 조회 -->
	<select id="cosmetic_review" resultType="ReviewVO" parameterType="int">
		<![CDATA[
			SELECT 
			    r.review_no,
			    r.good_comment,
			    r.bad_comment,
			    r.star_score,
			    TO_CHAR(r.create_dt, 'YYYY-MM-DD') as create_dt,
			    r.cosmetic_no,
			    r.mem_id,
			    COALESCE(m.mem_nickname, m.mem_nm) as mem_writer,
			    m.profile_img,
			    ma.face_type,
			    ma.add_type1,
			    ma.add_type2,
			    CASE 
			        WHEN EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(m.mem_birth, 'YYYY-MM-DD')) < 20 THEN '10대'
			        WHEN EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(m.mem_birth, 'YYYY-MM-DD')) < 30 THEN '20대'
			        WHEN EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(m.mem_birth, 'YYYY-MM-DD')) < 40 THEN '30대'
			        ELSE '40대 이상'
			    END as mem_age
			FROM 
			    review r
			    INNER JOIN members m ON r.mem_id = m.mem_id
			    LEFT JOIN member_addInfo ma ON m.mem_id = ma.mem_id
			WHERE 
			    r.cosmetic_no = #{cosmeticNo}
			ORDER BY 
			    r.create_dt DESC
    	]]>
	</select>
	
	<!-- 화장품 성분 조회 -->
	<select id="ingre_info" resultType="IngredientVO" parameterType="int">
		SELECT 
		    i.name_kor,
		    i.name_eng,
		    i.explain,
		    i.ewg_rank,
		    i.cosmetic_no,
		    i.index_num,
		    CASE 
		        WHEN a.name_eng IS NOT NULL THEN 'Y'
		        ELSE 'N'
		    END as allergy_yn
		FROM 
		    ingredient i
		LEFT JOIN 
		    allergy_ingredient a ON i.name_eng = a.name_eng
		WHERE 
		    i.cosmetic_no = #{cosmeticNo}
		ORDER BY i.index_num
	</select>
	
	<!-- 화장품 리뷰 작성 -->
	<insert id="review_writeDo" parameterType="ReviewVO">
		INSERT INTO review(review_no, good_comment, bad_comment, star_score, cosmetic_no, mem_id)
		VALUES(SEQ_REVIEW.NEXTVAL, #{goodComment}, #{badComment}, #{starScore}, #{cosmeticNo}, #{memId})
	</insert>
	
</mapper>