<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="comm.proj.my.member.dao.IMemberDAO">
	<!-- 회원가입 -->
    <insert id="registMember" parameterType="MemberVO">
		INSERT INTO members(mem_id, mem_pw, mem_nm, mem_nickname, mem_gender, mem_birth, profile_img)
		VALUES(#{memId}, #{memPw}, #{memNm}, #{memNickname}, #{memGender}, #{memBirth}, #{profileImg})
    </insert>

	<!-- 로그인 -->
    <select id="loginMember" parameterType="MemberVO" resultType="MemberVO">
		SELECT mem_id
		     , mem_pw
		     , mem_nm
		     , mem_nickname
		     , mem_gender
			 , mem_birth
		     , profile_img
		FROM members
		WHERE use_yn = 'Y'
		 AND  mem_id = #{memId}
		 AND  mem_pw = #{memPw}
    </select>
   
	<!-- 닉네임 중복확인 -->
    <select id="nicknameCheck" parameterType="String" resultType="int">
	   	SELECT count(mem_nickname) as mem_nickname
		FROM members
		WHERE mem_nickname = #{memNickname}
    </select>

	<!-- 아이디 중복확인 -->
    <select id="idCheck" parameterType="String" resultType="int">
		SELECT count(mem_id) as mem_id
		FROM members
		WHERE mem_id = #{memId}
    </select>

	<!-- 개인정보 수정(X) -->
	<update id="UpdateMember" parameterType="memberVO">
		UPDATE members
		SET mem_pw = #{memPw}, mem_nm = #{memNm}, mem_nickname = #{memNickname}, mem_gender = #{memGender}, mem_birth = #{memBirth}, profile_img = #{profileImg}
		WHERE mem_id = #{memId}
	</update>
	
	<!-- 내가 작성한 리뷰 조회 -->
	<select id="myReview" parameterType="String" resultType="ReviewVO">
		SELECT r.review_no
		     , r.good_comment
		     , r.bad_comment
		     , r.star_score
		     , TO_CHAR(r.create_dt, 'YYYY-MM-DD') as create_dt
		     , r.cosmetic_no
		     , r.mem_id
		     , nvl(m.mem_nickname, m.mem_nm) as mem_writer
		     , c.name
		     , c.company_name
		     , c.cos_image
		FROM review r, members m, cosmetic c
		WHERE m.mem_id = #{memId}
		 AND  r.mem_id = m.mem_id
		 AND  r.cosmetic_no = c.cosmetic_no
	</select>
	
	<!-- 수정하려는 리뷰 조회 -->
	<select id="reviewUpdateInfo" parameterType="ReviewVO" resultType="ReviewVO">
		SELECT r.review_no
		     , r.good_comment
		     , r.bad_comment
		     , r.star_score
		     , TO_CHAR(r.create_dt, 'YYYY-MM-DD') as create_dt
		     , r.cosmetic_no
		     , r.mem_id
		     , nvl(m.mem_nickname, m.mem_nm) as mem_writer
		     , c.name
		     , c.company_name
		     , c.cos_image
		FROM review r, members m, cosmetic c
		WHERE m.mem_id = #{memId}
		 AND  r.review_no = #{reviewNo}
		 AND  r.mem_id = m.mem_id
		 AND  r.cosmetic_no = c.cosmetic_no	
	</select>
	
	<!-- 리뷰 수정 -->
	<update id="review_update" parameterType="ReviewVO">
		UPDATE review
		SET good_comment = #{goodComment}, bad_comment = #{badComment}, star_score = #{starScore}
		WHERE review_no = #{reviewNo}
	</update>

	<!-- 리뷰 삭제 -->
	<delete id="reviewDelete" parameterType="String">
		DELETE FROM review
		WHERE review_no = #{reviewNo}
	</delete>

	<!-- 추가 정보 등록 -->
	<insert id="addInfoInsert" parameterType="AddInfoVO">
		INSERT INTO member_addInfo(face_type, add_type1, add_type2, mem_id)
		VALUES(#{faceType}, #{addType1}, #{addType2}, #{memId})
	</insert>
	
	<!-- 나의 추가 정보 조회 -->
	<select id="addInfoSelect" parameterType="AddInfoVO" resultType="String">
		<![CDATA[
			SELECT 
			    CASE 
			        WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, m.mem_birth) / 12) < 10 THEN '10대'
			        WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, m.mem_birth) / 12) < 20 THEN '20대'
			        WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, m.mem_birth) / 12) < 30 THEN '30대'
			        WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, m.mem_birth) / 12) < 40 THEN '40대'
			        ELSE '50대 이상' 
			    END AS mem_age,
			    ma.mem_id, 
			    ma.face_type, 
			    ma.add_type1, 
			    ma.add_type2
			FROM 
			    member_addInfo ma
			JOIN 
			    members m ON ma.mem_id = m.mem_id
			WHERE 
			    ma.mem_id = #{memId}
		]]>
	</select>
	
	<!-- 피부 기록 전체 건수 조회 -->
	<select id="getTotalRowCount" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM face_record WHERE mem_id = #{memId}
	</select>
	
	<!-- 피부 기록 -->
	<insert id="faceRecordInsert" parameterType="FaceRecordVO">
		INSERT INTO face_record(record_no, record_title, record_content, mem_id, record_date)
		VALUES(#{recordNo}, #{recordTitle}, #{recordContent}, #{memId}, #{recordDate})
	</insert>

	<!-- 피부 기록 조회 -->
	<select id="faceRecordInfo" parameterType="PagingVO" resultType="FaceRecordVO">
		SELECT *
		FROM (
		        SELECT a.*, ROWNUM as rnum
		        FROM (
		                SELECT record_no
		                     , record_title
		                     , record_content
		                     , mem_id
		                     , record_date
		                FROM face_record
		                WHERE mem_id = #{boCd}
		                ORDER BY record_date DESC
		              ) a
		      )b
		WHERE rnum BETWEEN #{firstRow} AND #{lastRow}
	</select>
	
	<!-- 피부 기록 상세 조회 -->
	<select id="faceRecordDetail" parameterType="String" resultType="FaceRecordVO">
		SELECT *
		FROM face_record
		WHERE record_no = #{reNo}
	</select>
	
	<!-- 피부 기록 수정 -->
	<update id="faceRecordUpdate" parameterType="FaceRecordVO">
		UPDATE face_record 
		SET record_title = #{recordTitle}, record_content = #{recordContent}, record_date = #{recordDate}
		WHERE record_no = #{recordNo}
	</update>

	<!-- 피부 기록 삭제 -->
	<update id="faceRecordDelete" parameterType="String">
		DELETE FROM face_record WHERE record_no = #{recordNo}
	</update>

	<!-- 계절별 피부 기록 등록 -->
	<insert id="insertSeasonRecord" parameterType="SeasonRecordVO">
		INSERT INTO season_record(season_no, season_name, routine_title, mem_id, use_yn)
		VALUES(#{seasonNo}, #{seasonName}, #{routineTitle}, #{memId}, #{useYn})
		
	</insert>
	
	<!-- 계절별 피부 기록 상세 등록 -->
	<insert id="insertSeasonDetail" parameterType="SeasonDetailVO">
		INSERT INTO season_detail(season_no, cosmetic_no, day_record, night_record)
		VALUES(#{seasonNo}, #{cosmeticNo}, #{dayRecord}, #{nightRecord})
	</insert>
	
	<!-- 계절별 피부 기록 조회 -->
	<select id="selectSeasonInfo" parameterType="SeasonRecordVO" resultType="SeasonRecordVO">
		select season_no
		     , case when season_name = 'spring' then '봄'
		            when season_name = 'summer' then '여름'
		            when season_name = 'fall' then '가을'
		            when season_name = 'winter' then '겨울'
		       end as season_name
		     , routine_title
		     , mem_id 
		from season_record
		where use_yn = 'Y'
		 and  season_name = #{seasonName}
		 and  mem_id = #{memId}
	</select>
	
	<!-- 계절별 피부 기록 상세 조회 -->
	<select id="selectSeasonDetail" parameterType="String" resultType="SeasonInfoVO">
		select sr.season_no, sr.season_name, sr.routine_title, c.name, c.cos_image, sd.cosmetic_no, c.company_name, sd.day_record, sd.night_record
		from season_record sr, season_detail sd, cosmetic c
		where sr.season_no = sd.season_no
		 and  c.cosmetic_no = sd.cosmetic_no
		 and  sr.season_no = #{seasonNo}
	</select>
	
	<!-- 계절별 피부 기록 수정시 화장품 삭제 -->
	<delete id="seasonCosDelete" parameterType="SeasonDetailVO">
		DELETE from season_detail
		WHERE season_no = #{seasonNo}
		 AND  cosmetic_no = #{cosmeticNo}
	</delete>
	
</mapper>
